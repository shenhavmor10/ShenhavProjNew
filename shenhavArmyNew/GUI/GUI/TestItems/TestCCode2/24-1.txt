FilePath - C:\Users\Shenhav\Desktop\LastUpdatedArmy\shenhavArmyNew\TestCCode2\TestCCode2\test.c
stdio.h
crtdefs.h
corecrt.h
_mingw.h
_mingw_mac.h
float
__MINGW64_VERSION_BUGFIX
do
typedef
register
auto
char
unsigned
int
default
__MINGW32_MAJOR_VERSION
else
__MINGW64_VERSION_MINOR
while
switch
__MINGW_HAVE_WIDE_C99_PRINTF
__MINGW_HAVE_WIDE_C99_SCANF
continue
__MINGW_HAVE_ANSI_C99_PRINTF
__MINGW64_VERSION_RC
__MINGW_HAVE_ANSI_C99_SCANF
union
if
short
static
volatile
break
void
extern
__MINGW64_VERSION_MAJOR
sizeof
__MINGW64_VERSION_STATE
double
__MINGW32_MINOR_VERSION
long
for
case
enum
return
const
struct
goto
signed
_mingw_secapi.h
_CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES_MEMORY
float
__MINGW64_VERSION_BUGFIX
do
typedef
register
auto
char
unsigned
int
default
__MINGW32_MAJOR_VERSION
else
__MINGW64_VERSION_MINOR
while
switch
__MINGW_HAVE_WIDE_C99_PRINTF
__MINGW_HAVE_WIDE_C99_SCANF
continue
__MINGW_HAVE_ANSI_C99_PRINTF
__MINGW64_VERSION_RC
__MINGW_HAVE_ANSI_C99_SCANF
union
_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_MEMORY
if
short
static
volatile
break
void
extern
__MINGW64_VERSION_MAJOR
sizeof
__MINGW64_VERSION_STATE
double
__MINGW32_MINOR_VERSION
long
for
case
enum
_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_COUNT
return
_CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES
_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES
const
struct
goto
signed
vadefs.h
_mingw.h
_CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES_MEMORY
float
__MINGW64_VERSION_BUGFIX
_VA_ALIGN
do
typedef
register
auto
char
unsigned
int
default
__MINGW32_MAJOR_VERSION
else
_CRT_PACKING
__MINGW64_VERSION_MINOR
while
switch
__MINGW_HAVE_WIDE_C99_PRINTF
__MINGW_HAVE_WIDE_C99_SCANF
continue
__LONG32
__MINGW_HAVE_ANSI_C99_PRINTF
__MINGW64_VERSION_RC
__MINGW_HAVE_ANSI_C99_SCANF
union
_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_MEMORY
if
short
static
volatile
break
void
extern
__MINGW64_VERSION_MAJOR
sizeof
__MINGW64_VERSION_STATE
double
__MINGW32_MINOR_VERSION
long
for
case
enum
_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_COUNT
return
_CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES
_VA_STRUCT_ALIGN
_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES
const
struct
goto
signed
sdks/_mingw_directx.h
_CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES_MEMORY
float
__MINGW64_VERSION_BUGFIX
_VA_ALIGN
do
typedef
register
auto
MINGW_HAS_DDRAW_H
char
unsigned
int
default
MINGW_HAS_SECURE_API
__MINGW32_MAJOR_VERSION
else
_CRT_PACKING
__MINGW64_VERSION_MINOR
while
switch
__MINGW_HAVE_WIDE_C99_PRINTF
__MINGW_HAVE_WIDE_C99_SCANF
continue
__LONG32
template<> struct __mingw_uuidof_s<type> {                   \
__MINGW_HAVE_ANSI_C99_PRINTF
__MINGW64_VERSION_RC
__MINGW_HAVE_ANSI_C99_SCANF
union
_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_MEMORY
if
_ARGMAX
short
static
volatile
break
void
extern
__USE_MINGW_ANSI_STDIO
__MINGW64_VERSION_MAJOR
sizeof
__MINGW64_VERSION_STATE
double
__MINGW32_MINOR_VERSION
long
for
case
enum
_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_COUNT
return
_CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES
_VA_STRUCT_ALIGN
_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES
const
__MINGW_HAS_DXSDK
struct
goto
signed
sdks/_mingw_ddk.h
_CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES_MEMORY
float
__MINGW64_VERSION_BUGFIX
_VA_ALIGN
do
typedef
register
auto
MINGW_HAS_DDRAW_H
char
unsigned
int
default
MINGW_HAS_SECURE_API
__MINGW32_MAJOR_VERSION
else
_CRT_PACKING
__MINGW64_VERSION_MINOR
while
switch
__MINGW_HAVE_WIDE_C99_PRINTF
__MINGW_HAVE_WIDE_C99_SCANF
continue
__LONG32
template<> struct __mingw_uuidof_s<type> {                   \
__MINGW_HAVE_ANSI_C99_PRINTF
__MINGW64_VERSION_RC
__MINGW_HAVE_ANSI_C99_SCANF
union
_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_MEMORY
MINGW_HAS_DDK_H
if
_ARGMAX
short
static
volatile
break
void
extern
__USE_MINGW_ANSI_STDIO
__MINGW64_VERSION_MAJOR
sizeof
__MINGW64_VERSION_STATE
double
__MINGW32_MINOR_VERSION
long
for
case
enum
_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_COUNT
return
_CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES
_VA_STRUCT_ALIGN
_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES
const
__MINGW_HAS_DXSDK
struct
goto
signed
_CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES_MEMORY
float
__MINGW64_VERSION_BUGFIX
_VA_ALIGN
do
typedef
register
auto
MINGW_HAS_DDRAW_H
char
unsigned
int
default
MINGW_HAS_SECURE_API
__MINGW32_MAJOR_VERSION
else
_CRT_PACKING
__MINGW64_VERSION_MINOR
while
switch
__MINGW_HAVE_WIDE_C99_PRINTF
__MINGW_HAVE_WIDE_C99_SCANF
continue
__LONG32
template<> struct __mingw_uuidof_s<type> {                   \
__MINGW_HAVE_ANSI_C99_PRINTF
__MINGW64_VERSION_RC
__MINGW_HAVE_ANSI_C99_SCANF
union
_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_MEMORY
MINGW_HAS_DDK_H
if
_ARGMAX
short
static
volatile
break
void
extern
__USE_MINGW_ANSI_STDIO
__MINGW64_VERSION_MAJOR
sizeof
__MINGW64_VERSION_STATE
double
__MINGW32_MINOR_VERSION
long
for
case
enum
_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_COUNT
return
_CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES
_VA_STRUCT_ALIGN
_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES
const
__MINGW_HAS_DXSDK
struct
goto
signed
double
struct threadlocaleinfostruct
struct
float
__MINGW_HAVE_ANSI_C99_SCANF
threadlocinfo
_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_COUNT
char
LPLC_ID
LC_ID
for
long
void
int
_locale_tstruct
default
MINGW_HAS_SECURE_API
_ARGMAX
else
sizeof
_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES
union
_VA_STRUCT_ALIGN
__MINGW32_MAJOR_VERSION
struct localeinfo_struct
register
_CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES_MEMORY
__MINGW64_VERSION_RC
switch
template<> struct __mingw_uuidof_s<type> {                   \
__MINGW32_MINOR_VERSION
case
if
static
typedef
_VA_ALIGN
continue
enum
signed
volatile
__MINGW_HAVE_WIDE_C99_PRINTF
__LONG32
do
__MINGW_HAVE_ANSI_C99_PRINTF
_locale_t
return
__MINGW64_VERSION_MINOR
__MINGW_HAS_DXSDK
break
_CRT_PACKING
__MINGW64_VERSION_MAJOR
extern
auto
goto
MINGW_HAS_DDRAW_H
__USE_MINGW_ANSI_STDIO
_CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES
MINGW_HAS_DDK_H
_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_MEMORY
__MINGW_HAVE_WIDE_C99_SCANF
__MINGW64_VERSION_BUGFIX
short
unsigned
while
__MINGW64_VERSION_STATE
const
struct tagLC_ID
double
struct threadlocaleinfostruct
struct
float
__MINGW_HAVE_ANSI_C99_SCANF
threadlocinfo
_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_COUNT
char
LPLC_ID
LC_ID
for
long
void
int
_locale_tstruct
default
MINGW_HAS_SECURE_API
_ARGMAX
else
sizeof
_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES
union
_VA_STRUCT_ALIGN
__MINGW32_MAJOR_VERSION
struct localeinfo_struct
register
_CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES_MEMORY
__MINGW64_VERSION_RC
switch
template<> struct __mingw_uuidof_s<type> {                   \
__MINGW32_MINOR_VERSION
case
if
static
typedef
_VA_ALIGN
continue
enum
signed
volatile
__MINGW_HAVE_WIDE_C99_PRINTF
__LONG32
do
__MINGW_HAVE_ANSI_C99_PRINTF
_locale_t
return
__MINGW64_VERSION_MINOR
__MINGW_HAS_DXSDK
break
_CRT_PACKING
__MINGW64_VERSION_MAJOR
extern
auto
goto
MINGW_HAS_DDRAW_H
__USE_MINGW_ANSI_STDIO
_CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES
MINGW_HAS_DDK_H
_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_MEMORY
__MINGW_HAVE_WIDE_C99_SCANF
__MINGW64_VERSION_BUGFIX
short
unsigned
while
__MINGW64_VERSION_STATE
const
struct tagLC_ID
_mingw_off_t.h
double
struct threadlocaleinfostruct
BUFSIZ
struct
float
__MINGW_HAVE_ANSI_C99_SCANF
threadlocinfo
_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_COUNT
char
LPLC_ID
LC_ID
FOPEN_MAX
for
long
SEEK_SET
void
int
_locale_tstruct
default
MINGW_HAS_SECURE_API
_ARGMAX
else
sizeof
_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES
union
_VA_STRUCT_ALIGN
__MINGW32_MAJOR_VERSION
struct localeinfo_struct
register
_CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES_MEMORY
__MINGW64_VERSION_RC
switch
template<> struct __mingw_uuidof_s<type> {                   \
__MINGW32_MINOR_VERSION
case
if
static
typedef
TMP_MAX
_VA_ALIGN
continue
enum
signed
volatile
__MINGW_HAVE_WIDE_C99_PRINTF
__LONG32
do
FILE
__MINGW_HAVE_ANSI_C99_PRINTF
_locale_t
return
__MINGW64_VERSION_MINOR
__MINGW_HAS_DXSDK
SEEK_CUR
break
_CRT_PACKING
__MINGW64_VERSION_MAJOR
extern
auto
goto
MINGW_HAS_DDRAW_H
SEEK_END
__USE_MINGW_ANSI_STDIO
_CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES
MINGW_HAS_DDK_H
struct _iobuf
_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_MEMORY
__MINGW_HAVE_WIDE_C99_SCANF
__MINGW64_VERSION_BUGFIX
short
FILENAME_MAX
_SYS_OPEN
unsigned
while
__MINGW64_VERSION_STATE
_IOB_ENTRIES
_NSTREAM_
const
struct tagLC_ID
swprintf.inl
vadefs.h
double
struct threadlocaleinfostruct
BUFSIZ
struct
float
__MINGW_HAVE_ANSI_C99_SCANF
threadlocinfo
_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_COUNT
char
LPLC_ID
LC_ID
FOPEN_MAX
for
long
SEEK_SET
void
int
_locale_tstruct
default
MINGW_HAS_SECURE_API
_ARGMAX
else
sizeof
_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES
union
_VA_STRUCT_ALIGN
__MINGW32_MAJOR_VERSION
struct localeinfo_struct
register
_CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES_MEMORY
__MINGW64_VERSION_RC
switch
template<> struct __mingw_uuidof_s<type> {                   \
__MINGW32_MINOR_VERSION
case
if
static
typedef
TMP_MAX
_VA_ALIGN
continue
enum
signed
volatile
__MINGW_HAVE_WIDE_C99_PRINTF
__LONG32
do
FILE
__MINGW_HAVE_ANSI_C99_PRINTF
_locale_t
return
__MINGW64_VERSION_MINOR
__MINGW_HAS_DXSDK
SEEK_CUR
break
_CRT_PACKING
__MINGW64_VERSION_MAJOR
extern
auto
goto
MINGW_HAS_DDRAW_H
SEEK_END
__USE_MINGW_ANSI_STDIO
_CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES
MINGW_HAS_DDK_H
struct _iobuf
_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_MEMORY
__MINGW_HAVE_WIDE_C99_SCANF
__MINGW64_VERSION_BUGFIX
short
FILENAME_MAX
_SYS_OPEN
unsigned
while
__MINGW64_VERSION_STATE
_IOB_ENTRIES
_NSTREAM_
const
struct tagLC_ID
sec_api/stdio_s.h
stdio.h
double
SYS_OPEN
struct threadlocaleinfostruct
BUFSIZ
struct
float
__MINGW_HAVE_ANSI_C99_SCANF
threadlocinfo
_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_COUNT
char
LPLC_ID
LC_ID
FOPEN_MAX
for
long
SEEK_SET
_WAIT_GRANDCHILD
void
int
_WAIT_CHILD
_locale_tstruct
default
MINGW_HAS_SECURE_API
_ARGMAX
else
sizeof
_P_WAIT
_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES
union
_OLD_P_OVERLAY
_VA_STRUCT_ALIGN
__MINGW32_MAJOR_VERSION
_P_NOWAITO
struct localeinfo_struct
register
_CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES_MEMORY
__MINGW64_VERSION_RC
switch
template<> struct __mingw_uuidof_s<type> {                   \
__MINGW32_MINOR_VERSION
case
if
static
typedef
TMP_MAX
_VA_ALIGN
continue
enum
signed
volatile
__MINGW_HAVE_WIDE_C99_PRINTF
__LONG32
do
FILE
__MINGW_HAVE_ANSI_C99_PRINTF
_locale_t
return
__MINGW64_VERSION_MINOR
_P_OVERLAY
__MINGW_HAS_DXSDK
_P_NOWAIT
SEEK_CUR
break
_CRT_PACKING
__MINGW64_VERSION_MAJOR
_P_DETACH
extern
auto
goto
MINGW_HAS_DDRAW_H
SEEK_END
__USE_MINGW_ANSI_STDIO
_CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES
MINGW_HAS_DDK_H
struct _iobuf
_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_MEMORY
__MINGW_HAVE_WIDE_C99_SCANF
__MINGW64_VERSION_BUGFIX
short
FILENAME_MAX
_SYS_OPEN
unsigned
while
__MINGW64_VERSION_STATE
_IOB_ENTRIES
_NSTREAM_
const
struct tagLC_ID
double
SYS_OPEN
struct threadlocaleinfostruct
BUFSIZ
struct
float
__MINGW_HAVE_ANSI_C99_SCANF
threadlocinfo
_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_COUNT
char
LPLC_ID
LC_ID
FOPEN_MAX
for
long
SEEK_SET
_WAIT_GRANDCHILD
void
int
_WAIT_CHILD
_locale_tstruct
default
MINGW_HAS_SECURE_API
_ARGMAX
else
sizeof
_P_WAIT
_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES
union
_OLD_P_OVERLAY
_VA_STRUCT_ALIGN
__MINGW32_MAJOR_VERSION
_P_NOWAITO
struct localeinfo_struct
register
_CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES_MEMORY
__MINGW64_VERSION_RC
switch
template<> struct __mingw_uuidof_s<type> {                   \
__MINGW32_MINOR_VERSION
case
if
static
typedef
TMP_MAX
_VA_ALIGN
continue
enum
signed
volatile
__MINGW_HAVE_WIDE_C99_PRINTF
__LONG32
do
FILE
__MINGW_HAVE_ANSI_C99_PRINTF
_locale_t
return
__MINGW64_VERSION_MINOR
_P_OVERLAY
__MINGW_HAS_DXSDK
_P_NOWAIT
SEEK_CUR
break
_CRT_PACKING
__MINGW64_VERSION_MAJOR
_P_DETACH
extern
auto
goto
MINGW_HAS_DDRAW_H
SEEK_END
__USE_MINGW_ANSI_STDIO
_CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES
MINGW_HAS_DDK_H
struct _iobuf
_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_MEMORY
__MINGW_HAVE_WIDE_C99_SCANF
__MINGW64_VERSION_BUGFIX
short
FILENAME_MAX
_SYS_OPEN
unsigned
while
__MINGW64_VERSION_STATE
_IOB_ENTRIES
_NSTREAM_
const
struct tagLC_ID
Eight2
double
SYS_OPEN
struct threadlocaleinfostruct
struct example1
BUFSIZ
struct
float
__MINGW_HAVE_ANSI_C99_SCANF
threadlocinfo
_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_COUNT
char
LPLC_ID
Eight
LC_ID
struct example2
FOPEN_MAX
struct example4
for
long
SEEK_SET
newStructThing
_WAIT_GRANDCHILD
void
int
_WAIT_CHILD
struct example3
_locale_tstruct
default
MINGW_HAS_SECURE_API
_ARGMAX
else
sizeof
_P_WAIT
_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES
union
_OLD_P_OVERLAY
_VA_STRUCT_ALIGN
__MINGW32_MAJOR_VERSION
_P_NOWAITO
struct localeinfo_struct
register
_CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES_MEMORY
__MINGW64_VERSION_RC
switch
template<> struct __mingw_uuidof_s<type> {                   \
__MINGW32_MINOR_VERSION
case
if
static
typedef
TMP_MAX
_VA_ALIGN
continue
enum
signed
volatile
__MINGW_HAVE_WIDE_C99_PRINTF
__LONG32
do
FILE
__MINGW_HAVE_ANSI_C99_PRINTF
_locale_t
return
__MINGW64_VERSION_MINOR
_P_OVERLAY
__MINGW_HAS_DXSDK
_P_NOWAIT
mychar
SEEK_CUR
break
_CRT_PACKING
__MINGW64_VERSION_MAJOR
_P_DETACH
extern
auto
goto
MINGW_HAS_DDRAW_H
SEEK_END
__USE_MINGW_ANSI_STDIO
_CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES
MINGW_HAS_DDK_H
struct _iobuf
_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_MEMORY
__MINGW_HAVE_WIDE_C99_SCANF
__MINGW64_VERSION_BUGFIX
short
FILENAME_MAX
_SYS_OPEN
unsigned
while
__MINGW64_VERSION_STATE
_IOB_ENTRIES
_NSTREAM_
const
struct tagLC_ID
int32
97
Eight2
double
SYS_OPEN
struct threadlocaleinfostruct
struct example1
BUFSIZ
struct
float
__MINGW_HAVE_ANSI_C99_SCANF
threadlocinfo
_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_COUNT
char
LPLC_ID
Eight
LC_ID
struct example2
FOPEN_MAX
struct example4
for
long
SEEK_SET
newStructThing
_WAIT_GRANDCHILD
void
int
_WAIT_CHILD
struct example3
_locale_tstruct
default
MINGW_HAS_SECURE_API
_ARGMAX
else
sizeof
_P_WAIT
_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES
union
_OLD_P_OVERLAY
_VA_STRUCT_ALIGN
__MINGW32_MAJOR_VERSION
_P_NOWAITO
struct localeinfo_struct
register
_CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES_MEMORY
__MINGW64_VERSION_RC
switch
template<> struct __mingw_uuidof_s<type> {                   \
__MINGW32_MINOR_VERSION
case
if
static
typedef
TMP_MAX
_VA_ALIGN
continue
enum
signed
volatile
__MINGW_HAVE_WIDE_C99_PRINTF
__LONG32
do
FILE
__MINGW_HAVE_ANSI_C99_PRINTF
_locale_t
return
__MINGW64_VERSION_MINOR
_P_OVERLAY
__MINGW_HAS_DXSDK
_P_NOWAIT
mychar
SEEK_CUR
break
_CRT_PACKING
__MINGW64_VERSION_MAJOR
_P_DETACH
extern
auto
goto
MINGW_HAS_DDRAW_H
SEEK_END
__USE_MINGW_ANSI_STDIO
_CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES
MINGW_HAS_DDK_H
struct _iobuf
_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_MEMORY
__MINGW_HAVE_WIDE_C99_SCANF
__MINGW64_VERSION_BUGFIX
short
FILENAME_MAX
_SYS_OPEN
unsigned
while
__MINGW64_VERSION_STATE
_IOB_ENTRIES
_NSTREAM_
const
struct tagLC_ID
int32
97
stdio.h
crtdefs.h
corecrt.h
_mingw.h
_mingw_mac.h
float
__MINGW64_VERSION_BUGFIX
do
typedef
register
auto
char
unsigned
int
default
__MINGW32_MAJOR_VERSION
else
__MINGW64_VERSION_MINOR
while
switch
__MINGW_HAVE_WIDE_C99_PRINTF
__MINGW_HAVE_WIDE_C99_SCANF
continue
__MINGW_HAVE_ANSI_C99_PRINTF
__MINGW64_VERSION_RC
__MINGW_HAVE_ANSI_C99_SCANF
union
if
short
static
volatile
break
void
extern
__MINGW64_VERSION_MAJOR
sizeof
__MINGW64_VERSION_STATE
double
__MINGW32_MINOR_VERSION
long
for
case
enum
return
const
struct
goto
signed
_mingw_secapi.h
_CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES_MEMORY
float
__MINGW64_VERSION_BUGFIX
do
typedef
register
auto
char
unsigned
int
default
__MINGW32_MAJOR_VERSION
else
__MINGW64_VERSION_MINOR
while
switch
__MINGW_HAVE_WIDE_C99_PRINTF
__MINGW_HAVE_WIDE_C99_SCANF
continue
__MINGW_HAVE_ANSI_C99_PRINTF
__MINGW64_VERSION_RC
__MINGW_HAVE_ANSI_C99_SCANF
union
_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_MEMORY
if
short
static
volatile
break
void
extern
__MINGW64_VERSION_MAJOR
sizeof
__MINGW64_VERSION_STATE
double
__MINGW32_MINOR_VERSION
long
for
case
enum
_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_COUNT
return
_CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES
_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES
const
struct
goto
signed
vadefs.h
_mingw.h
_CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES_MEMORY
float
__MINGW64_VERSION_BUGFIX
_VA_ALIGN
do
typedef
register
auto
char
unsigned
int
default
__MINGW32_MAJOR_VERSION
else
_CRT_PACKING
__MINGW64_VERSION_MINOR
while
switch
__MINGW_HAVE_WIDE_C99_PRINTF
__MINGW_HAVE_WIDE_C99_SCANF
continue
__LONG32
__MINGW_HAVE_ANSI_C99_PRINTF
__MINGW64_VERSION_RC
__MINGW_HAVE_ANSI_C99_SCANF
union
_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_MEMORY
if
short
static
volatile
break
void
extern
__MINGW64_VERSION_MAJOR
sizeof
__MINGW64_VERSION_STATE
double
__MINGW32_MINOR_VERSION
long
for
case
enum
_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_COUNT
return
_CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES
_VA_STRUCT_ALIGN
_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES
const
struct
goto
signed
sdks/_mingw_directx.h
_CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES_MEMORY
float
__MINGW64_VERSION_BUGFIX
_VA_ALIGN
do
typedef
register
auto
MINGW_HAS_DDRAW_H
char
unsigned
int
default
MINGW_HAS_SECURE_API
__MINGW32_MAJOR_VERSION
else
_CRT_PACKING
__MINGW64_VERSION_MINOR
while
switch
__MINGW_HAVE_WIDE_C99_PRINTF
__MINGW_HAVE_WIDE_C99_SCANF
continue
__LONG32
template<> struct __mingw_uuidof_s<type> {                   \
__MINGW_HAVE_ANSI_C99_PRINTF
__MINGW64_VERSION_RC
__MINGW_HAVE_ANSI_C99_SCANF
union
_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_MEMORY
if
_ARGMAX
short
static
volatile
break
void
extern
__USE_MINGW_ANSI_STDIO
__MINGW64_VERSION_MAJOR
sizeof
__MINGW64_VERSION_STATE
double
__MINGW32_MINOR_VERSION
long
for
case
enum
_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_COUNT
return
_CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES
_VA_STRUCT_ALIGN
_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES
const
__MINGW_HAS_DXSDK
struct
goto
signed
sdks/_mingw_ddk.h
_CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES_MEMORY
float
__MINGW64_VERSION_BUGFIX
_VA_ALIGN
do
typedef
register
auto
MINGW_HAS_DDRAW_H
char
unsigned
int
default
MINGW_HAS_SECURE_API
__MINGW32_MAJOR_VERSION
else
_CRT_PACKING
__MINGW64_VERSION_MINOR
while
switch
__MINGW_HAVE_WIDE_C99_PRINTF
__MINGW_HAVE_WIDE_C99_SCANF
continue
__LONG32
template<> struct __mingw_uuidof_s<type> {                   \
__MINGW_HAVE_ANSI_C99_PRINTF
__MINGW64_VERSION_RC
__MINGW_HAVE_ANSI_C99_SCANF
union
_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_MEMORY
MINGW_HAS_DDK_H
if
_ARGMAX
short
static
volatile
break
void
extern
__USE_MINGW_ANSI_STDIO
__MINGW64_VERSION_MAJOR
sizeof
__MINGW64_VERSION_STATE
double
__MINGW32_MINOR_VERSION
long
for
case
enum
_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_COUNT
return
_CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES
_VA_STRUCT_ALIGN
_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES
const
__MINGW_HAS_DXSDK
struct
goto
signed
_CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES_MEMORY
float
__MINGW64_VERSION_BUGFIX
_VA_ALIGN
do
typedef
register
auto
MINGW_HAS_DDRAW_H
char
unsigned
int
default
MINGW_HAS_SECURE_API
__MINGW32_MAJOR_VERSION
else
_CRT_PACKING
__MINGW64_VERSION_MINOR
while
switch
__MINGW_HAVE_WIDE_C99_PRINTF
__MINGW_HAVE_WIDE_C99_SCANF
continue
__LONG32
template<> struct __mingw_uuidof_s<type> {                   \
__MINGW_HAVE_ANSI_C99_PRINTF
__MINGW64_VERSION_RC
__MINGW_HAVE_ANSI_C99_SCANF
union
_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_MEMORY
MINGW_HAS_DDK_H
if
_ARGMAX
short
static
volatile
break
void
extern
__USE_MINGW_ANSI_STDIO
__MINGW64_VERSION_MAJOR
sizeof
__MINGW64_VERSION_STATE
double
__MINGW32_MINOR_VERSION
long
for
case
enum
_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_COUNT
return
_CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES
_VA_STRUCT_ALIGN
_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES
const
__MINGW_HAS_DXSDK
struct
goto
signed
double
struct threadlocaleinfostruct
struct
float
__MINGW_HAVE_ANSI_C99_SCANF
threadlocinfo
_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_COUNT
char
LPLC_ID
LC_ID
for
long
void
int
_locale_tstruct
default
MINGW_HAS_SECURE_API
_ARGMAX
else
sizeof
_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES
union
_VA_STRUCT_ALIGN
__MINGW32_MAJOR_VERSION
struct localeinfo_struct
register
_CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES_MEMORY
__MINGW64_VERSION_RC
switch
template<> struct __mingw_uuidof_s<type> {                   \
__MINGW32_MINOR_VERSION
case
if
static
typedef
_VA_ALIGN
continue
enum
signed
volatile
__MINGW_HAVE_WIDE_C99_PRINTF
__LONG32
do
__MINGW_HAVE_ANSI_C99_PRINTF
_locale_t
return
__MINGW64_VERSION_MINOR
__MINGW_HAS_DXSDK
break
_CRT_PACKING
__MINGW64_VERSION_MAJOR
extern
auto
goto
MINGW_HAS_DDRAW_H
__USE_MINGW_ANSI_STDIO
_CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES
MINGW_HAS_DDK_H
_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_MEMORY
__MINGW_HAVE_WIDE_C99_SCANF
__MINGW64_VERSION_BUGFIX
short
unsigned
while
__MINGW64_VERSION_STATE
const
struct tagLC_ID
double
struct threadlocaleinfostruct
struct
float
__MINGW_HAVE_ANSI_C99_SCANF
threadlocinfo
_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_COUNT
char
LPLC_ID
LC_ID
for
long
void
int
_locale_tstruct
default
MINGW_HAS_SECURE_API
_ARGMAX
else
sizeof
_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES
union
_VA_STRUCT_ALIGN
__MINGW32_MAJOR_VERSION
struct localeinfo_struct
register
_CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES_MEMORY
__MINGW64_VERSION_RC
switch
template<> struct __mingw_uuidof_s<type> {                   \
__MINGW32_MINOR_VERSION
case
if
static
typedef
_VA_ALIGN
continue
enum
signed
volatile
__MINGW_HAVE_WIDE_C99_PRINTF
__LONG32
do
__MINGW_HAVE_ANSI_C99_PRINTF
_locale_t
return
__MINGW64_VERSION_MINOR
__MINGW_HAS_DXSDK
break
_CRT_PACKING
__MINGW64_VERSION_MAJOR
extern
auto
goto
MINGW_HAS_DDRAW_H
__USE_MINGW_ANSI_STDIO
_CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES
MINGW_HAS_DDK_H
_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_MEMORY
__MINGW_HAVE_WIDE_C99_SCANF
__MINGW64_VERSION_BUGFIX
short
unsigned
while
__MINGW64_VERSION_STATE
const
struct tagLC_ID
_mingw_off_t.h
double
struct threadlocaleinfostruct
BUFSIZ
struct
float
__MINGW_HAVE_ANSI_C99_SCANF
threadlocinfo
_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_COUNT
char
LPLC_ID
LC_ID
FOPEN_MAX
for
long
SEEK_SET
void
int
_locale_tstruct
default
MINGW_HAS_SECURE_API
_ARGMAX
else
sizeof
_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES
union
_VA_STRUCT_ALIGN
__MINGW32_MAJOR_VERSION
struct localeinfo_struct
register
_CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES_MEMORY
__MINGW64_VERSION_RC
switch
template<> struct __mingw_uuidof_s<type> {                   \
__MINGW32_MINOR_VERSION
case
if
static
typedef
TMP_MAX
_VA_ALIGN
continue
enum
signed
volatile
__MINGW_HAVE_WIDE_C99_PRINTF
__LONG32
do
FILE
__MINGW_HAVE_ANSI_C99_PRINTF
_locale_t
return
__MINGW64_VERSION_MINOR
__MINGW_HAS_DXSDK
SEEK_CUR
break
_CRT_PACKING
__MINGW64_VERSION_MAJOR
extern
auto
goto
MINGW_HAS_DDRAW_H
SEEK_END
__USE_MINGW_ANSI_STDIO
_CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES
MINGW_HAS_DDK_H
struct _iobuf
_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_MEMORY
__MINGW_HAVE_WIDE_C99_SCANF
__MINGW64_VERSION_BUGFIX
short
FILENAME_MAX
_SYS_OPEN
unsigned
while
__MINGW64_VERSION_STATE
_IOB_ENTRIES
_NSTREAM_
const
struct tagLC_ID
swprintf.inl
vadefs.h
double
struct threadlocaleinfostruct
BUFSIZ
struct
float
__MINGW_HAVE_ANSI_C99_SCANF
threadlocinfo
_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_COUNT
char
LPLC_ID
LC_ID
FOPEN_MAX
for
long
SEEK_SET
void
int
_locale_tstruct
default
MINGW_HAS_SECURE_API
_ARGMAX
else
sizeof
_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES
union
_VA_STRUCT_ALIGN
__MINGW32_MAJOR_VERSION
struct localeinfo_struct
register
_CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES_MEMORY
__MINGW64_VERSION_RC
switch
template<> struct __mingw_uuidof_s<type> {                   \
__MINGW32_MINOR_VERSION
case
if
static
typedef
TMP_MAX
_VA_ALIGN
continue
enum
signed
volatile
__MINGW_HAVE_WIDE_C99_PRINTF
__LONG32
do
FILE
__MINGW_HAVE_ANSI_C99_PRINTF
_locale_t
return
__MINGW64_VERSION_MINOR
__MINGW_HAS_DXSDK
SEEK_CUR
break
_CRT_PACKING
__MINGW64_VERSION_MAJOR
extern
auto
goto
MINGW_HAS_DDRAW_H
SEEK_END
__USE_MINGW_ANSI_STDIO
_CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES
MINGW_HAS_DDK_H
struct _iobuf
_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_MEMORY
__MINGW_HAVE_WIDE_C99_SCANF
__MINGW64_VERSION_BUGFIX
short
FILENAME_MAX
_SYS_OPEN
unsigned
while
__MINGW64_VERSION_STATE
_IOB_ENTRIES
_NSTREAM_
const
struct tagLC_ID
sec_api/stdio_s.h
stdio.h
double
SYS_OPEN
struct threadlocaleinfostruct
BUFSIZ
struct
float
__MINGW_HAVE_ANSI_C99_SCANF
threadlocinfo
_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_COUNT
char
LPLC_ID
LC_ID
FOPEN_MAX
for
long
SEEK_SET
_WAIT_GRANDCHILD
void
int
_WAIT_CHILD
_locale_tstruct
default
MINGW_HAS_SECURE_API
_ARGMAX
else
sizeof
_P_WAIT
_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES
union
_OLD_P_OVERLAY
_VA_STRUCT_ALIGN
__MINGW32_MAJOR_VERSION
_P_NOWAITO
struct localeinfo_struct
register
_CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES_MEMORY
__MINGW64_VERSION_RC
switch
template<> struct __mingw_uuidof_s<type> {                   \
__MINGW32_MINOR_VERSION
case
if
static
typedef
TMP_MAX
_VA_ALIGN
continue
enum
signed
volatile
__MINGW_HAVE_WIDE_C99_PRINTF
__LONG32
do
FILE
__MINGW_HAVE_ANSI_C99_PRINTF
_locale_t
return
__MINGW64_VERSION_MINOR
_P_OVERLAY
__MINGW_HAS_DXSDK
_P_NOWAIT
SEEK_CUR
break
_CRT_PACKING
__MINGW64_VERSION_MAJOR
_P_DETACH
extern
auto
goto
MINGW_HAS_DDRAW_H
SEEK_END
__USE_MINGW_ANSI_STDIO
_CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES
MINGW_HAS_DDK_H
struct _iobuf
_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_MEMORY
__MINGW_HAVE_WIDE_C99_SCANF
__MINGW64_VERSION_BUGFIX
short
FILENAME_MAX
_SYS_OPEN
unsigned
while
__MINGW64_VERSION_STATE
_IOB_ENTRIES
_NSTREAM_
const
struct tagLC_ID
double
SYS_OPEN
struct threadlocaleinfostruct
BUFSIZ
struct
float
__MINGW_HAVE_ANSI_C99_SCANF
threadlocinfo
_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_COUNT
char
LPLC_ID
LC_ID
FOPEN_MAX
for
long
SEEK_SET
_WAIT_GRANDCHILD
void
int
_WAIT_CHILD
_locale_tstruct
default
MINGW_HAS_SECURE_API
_ARGMAX
else
sizeof
_P_WAIT
_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES
union
_OLD_P_OVERLAY
_VA_STRUCT_ALIGN
__MINGW32_MAJOR_VERSION
_P_NOWAITO
struct localeinfo_struct
register
_CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES_MEMORY
__MINGW64_VERSION_RC
switch
template<> struct __mingw_uuidof_s<type> {                   \
__MINGW32_MINOR_VERSION
case
if
static
typedef
TMP_MAX
_VA_ALIGN
continue
enum
signed
volatile
__MINGW_HAVE_WIDE_C99_PRINTF
__LONG32
do
FILE
__MINGW_HAVE_ANSI_C99_PRINTF
_locale_t
return
__MINGW64_VERSION_MINOR
_P_OVERLAY
__MINGW_HAS_DXSDK
_P_NOWAIT
SEEK_CUR
break
_CRT_PACKING
__MINGW64_VERSION_MAJOR
_P_DETACH
extern
auto
goto
MINGW_HAS_DDRAW_H
SEEK_END
__USE_MINGW_ANSI_STDIO
_CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES
MINGW_HAS_DDK_H
struct _iobuf
_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_MEMORY
__MINGW_HAVE_WIDE_C99_SCANF
__MINGW64_VERSION_BUGFIX
short
FILENAME_MAX
_SYS_OPEN
unsigned
while
__MINGW64_VERSION_STATE
_IOB_ENTRIES
_NSTREAM_
const
struct tagLC_ID
Eight2
double
SYS_OPEN
struct threadlocaleinfostruct
struct example1
BUFSIZ
struct
float
__MINGW_HAVE_ANSI_C99_SCANF
threadlocinfo
_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_COUNT
char
LPLC_ID
Eight
LC_ID
struct example2
FOPEN_MAX
for
long
SEEK_SET
newStructThing
_WAIT_GRANDCHILD
void
int
_WAIT_CHILD
struct example3
_locale_tstruct
default
MINGW_HAS_SECURE_API
_ARGMAX
else
sizeof
_P_WAIT
_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES
union
_OLD_P_OVERLAY
_VA_STRUCT_ALIGN
__MINGW32_MAJOR_VERSION
_P_NOWAITO
struct localeinfo_struct
register
_CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES_MEMORY
__MINGW64_VERSION_RC
switch
template<> struct __mingw_uuidof_s<type> {                   \
__MINGW32_MINOR_VERSION
case
if
static
typedef
TMP_MAX
_VA_ALIGN
continue
enum
signed
volatile
__MINGW_HAVE_WIDE_C99_PRINTF
__LONG32
do
FILE
__MINGW_HAVE_ANSI_C99_PRINTF
_locale_t
return
__MINGW64_VERSION_MINOR
_P_OVERLAY
__MINGW_HAS_DXSDK
_P_NOWAIT
mychar
SEEK_CUR
break
_CRT_PACKING
__MINGW64_VERSION_MAJOR
_P_DETACH
extern
auto
goto
MINGW_HAS_DDRAW_H
SEEK_END
__USE_MINGW_ANSI_STDIO
_CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES
MINGW_HAS_DDK_H
struct _iobuf
_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_MEMORY
__MINGW_HAVE_WIDE_C99_SCANF
__MINGW64_VERSION_BUGFIX
short
FILENAME_MAX
_SYS_OPEN
unsigned
while
__MINGW64_VERSION_STATE
_IOB_ENTRIES
_NSTREAM_
const
struct tagLC_ID
int32
96
Eight2
double
SYS_OPEN
struct threadlocaleinfostruct
struct example1
BUFSIZ
struct
float
__MINGW_HAVE_ANSI_C99_SCANF
threadlocinfo
_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_COUNT
char
LPLC_ID
Eight
LC_ID
struct example2
FOPEN_MAX
for
long
SEEK_SET
newStructThing
_WAIT_GRANDCHILD
void
int
_WAIT_CHILD
struct example3
_locale_tstruct
default
MINGW_HAS_SECURE_API
_ARGMAX
else
sizeof
_P_WAIT
_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES
union
_OLD_P_OVERLAY
_VA_STRUCT_ALIGN
__MINGW32_MAJOR_VERSION
_P_NOWAITO
struct localeinfo_struct
register
_CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES_MEMORY
__MINGW64_VERSION_RC
switch
template<> struct __mingw_uuidof_s<type> {                   \
__MINGW32_MINOR_VERSION
case
if
static
typedef
TMP_MAX
_VA_ALIGN
continue
enum
signed
volatile
__MINGW_HAVE_WIDE_C99_PRINTF
__LONG32
do
FILE
__MINGW_HAVE_ANSI_C99_PRINTF
_locale_t
return
__MINGW64_VERSION_MINOR
_P_OVERLAY
__MINGW_HAS_DXSDK
_P_NOWAIT
mychar
SEEK_CUR
break
_CRT_PACKING
__MINGW64_VERSION_MAJOR
_P_DETACH
extern
auto
goto
MINGW_HAS_DDRAW_H
SEEK_END
__USE_MINGW_ANSI_STDIO
_CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES
MINGW_HAS_DDK_H
struct _iobuf
_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_MEMORY
__MINGW_HAVE_WIDE_C99_SCANF
__MINGW64_VERSION_BUGFIX
short
FILENAME_MAX
_SYS_OPEN
unsigned
while
__MINGW64_VERSION_STATE
_IOB_ENTRIES
_NSTREAM_
const
struct tagLC_ID
int32
96
stdio.h
crtdefs.h
corecrt.h
_mingw.h
_mingw_mac.h
float
__MINGW64_VERSION_BUGFIX
do
typedef
register
auto
char
unsigned
int
default
__MINGW32_MAJOR_VERSION
else
__MINGW64_VERSION_MINOR
while
switch
__MINGW_HAVE_WIDE_C99_PRINTF
__MINGW_HAVE_WIDE_C99_SCANF
continue
__MINGW_HAVE_ANSI_C99_PRINTF
__MINGW64_VERSION_RC
__MINGW_HAVE_ANSI_C99_SCANF
union
if
short
static
volatile
break
void
extern
__MINGW64_VERSION_MAJOR
sizeof
__MINGW64_VERSION_STATE
double
__MINGW32_MINOR_VERSION
long
for
case
enum
return
const
struct
goto
signed
_mingw_secapi.h
_CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES_MEMORY
float
__MINGW64_VERSION_BUGFIX
do
typedef
register
auto
char
unsigned
int
default
__MINGW32_MAJOR_VERSION
else
__MINGW64_VERSION_MINOR
while
switch
__MINGW_HAVE_WIDE_C99_PRINTF
__MINGW_HAVE_WIDE_C99_SCANF
continue
__MINGW_HAVE_ANSI_C99_PRINTF
__MINGW64_VERSION_RC
__MINGW_HAVE_ANSI_C99_SCANF
union
_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_MEMORY
if
short
static
volatile
break
void
extern
__MINGW64_VERSION_MAJOR
sizeof
__MINGW64_VERSION_STATE
double
__MINGW32_MINOR_VERSION
long
for
case
enum
_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_COUNT
return
_CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES
_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES
const
struct
goto
signed
vadefs.h
_mingw.h
_CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES_MEMORY
float
__MINGW64_VERSION_BUGFIX
_VA_ALIGN
do
typedef
register
auto
char
unsigned
int
default
__MINGW32_MAJOR_VERSION
else
_CRT_PACKING
__MINGW64_VERSION_MINOR
while
switch
__MINGW_HAVE_WIDE_C99_PRINTF
__MINGW_HAVE_WIDE_C99_SCANF
continue
__LONG32
__MINGW_HAVE_ANSI_C99_PRINTF
__MINGW64_VERSION_RC
__MINGW_HAVE_ANSI_C99_SCANF
union
_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_MEMORY
if
short
static
volatile
break
void
extern
__MINGW64_VERSION_MAJOR
sizeof
__MINGW64_VERSION_STATE
double
__MINGW32_MINOR_VERSION
long
for
case
enum
_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_COUNT
return
_CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES
_VA_STRUCT_ALIGN
_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES
const
struct
goto
signed
sdks/_mingw_directx.h
_CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES_MEMORY
float
__MINGW64_VERSION_BUGFIX
_VA_ALIGN
do
typedef
register
auto
MINGW_HAS_DDRAW_H
char
unsigned
int
default
MINGW_HAS_SECURE_API
__MINGW32_MAJOR_VERSION
else
_CRT_PACKING
__MINGW64_VERSION_MINOR
while
switch
__MINGW_HAVE_WIDE_C99_PRINTF
__MINGW_HAVE_WIDE_C99_SCANF
continue
__LONG32
template<> struct __mingw_uuidof_s<type> {                   \
__MINGW_HAVE_ANSI_C99_PRINTF
__MINGW64_VERSION_RC
__MINGW_HAVE_ANSI_C99_SCANF
union
_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_MEMORY
if
_ARGMAX
short
static
volatile
break
void
extern
__USE_MINGW_ANSI_STDIO
__MINGW64_VERSION_MAJOR
sizeof
__MINGW64_VERSION_STATE
double
__MINGW32_MINOR_VERSION
long
for
case
enum
_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_COUNT
return
_CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES
_VA_STRUCT_ALIGN
_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES
const
__MINGW_HAS_DXSDK
struct
goto
signed
sdks/_mingw_ddk.h
_CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES_MEMORY
float
__MINGW64_VERSION_BUGFIX
_VA_ALIGN
do
typedef
register
auto
MINGW_HAS_DDRAW_H
char
unsigned
int
default
MINGW_HAS_SECURE_API
__MINGW32_MAJOR_VERSION
else
_CRT_PACKING
__MINGW64_VERSION_MINOR
while
switch
__MINGW_HAVE_WIDE_C99_PRINTF
__MINGW_HAVE_WIDE_C99_SCANF
continue
__LONG32
template<> struct __mingw_uuidof_s<type> {                   \
__MINGW_HAVE_ANSI_C99_PRINTF
__MINGW64_VERSION_RC
__MINGW_HAVE_ANSI_C99_SCANF
union
_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_MEMORY
MINGW_HAS_DDK_H
if
_ARGMAX
short
static
volatile
break
void
extern
__USE_MINGW_ANSI_STDIO
__MINGW64_VERSION_MAJOR
sizeof
__MINGW64_VERSION_STATE
double
__MINGW32_MINOR_VERSION
long
for
case
enum
_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_COUNT
return
_CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES
_VA_STRUCT_ALIGN
_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES
const
__MINGW_HAS_DXSDK
struct
goto
signed
_CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES_MEMORY
float
__MINGW64_VERSION_BUGFIX
_VA_ALIGN
do
typedef
register
auto
MINGW_HAS_DDRAW_H
char
unsigned
int
default
MINGW_HAS_SECURE_API
__MINGW32_MAJOR_VERSION
else
_CRT_PACKING
__MINGW64_VERSION_MINOR
while
switch
__MINGW_HAVE_WIDE_C99_PRINTF
__MINGW_HAVE_WIDE_C99_SCANF
continue
__LONG32
template<> struct __mingw_uuidof_s<type> {                   \
__MINGW_HAVE_ANSI_C99_PRINTF
__MINGW64_VERSION_RC
__MINGW_HAVE_ANSI_C99_SCANF
union
_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_MEMORY
MINGW_HAS_DDK_H
if
_ARGMAX
short
static
volatile
break
void
extern
__USE_MINGW_ANSI_STDIO
__MINGW64_VERSION_MAJOR
sizeof
__MINGW64_VERSION_STATE
double
__MINGW32_MINOR_VERSION
long
for
case
enum
_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_COUNT
return
_CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES
_VA_STRUCT_ALIGN
_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES
const
__MINGW_HAS_DXSDK
struct
goto
signed
double
struct threadlocaleinfostruct
struct
float
__MINGW_HAVE_ANSI_C99_SCANF
threadlocinfo
_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_COUNT
char
LPLC_ID
LC_ID
for
long
void
int
_locale_tstruct
default
MINGW_HAS_SECURE_API
_ARGMAX
else
sizeof
_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES
union
_VA_STRUCT_ALIGN
__MINGW32_MAJOR_VERSION
struct localeinfo_struct
register
_CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES_MEMORY
__MINGW64_VERSION_RC
switch
template<> struct __mingw_uuidof_s<type> {                   \
__MINGW32_MINOR_VERSION
case
if
static
typedef
_VA_ALIGN
continue
enum
signed
volatile
__MINGW_HAVE_WIDE_C99_PRINTF
__LONG32
do
__MINGW_HAVE_ANSI_C99_PRINTF
_locale_t
return
__MINGW64_VERSION_MINOR
__MINGW_HAS_DXSDK
break
_CRT_PACKING
__MINGW64_VERSION_MAJOR
extern
auto
goto
MINGW_HAS_DDRAW_H
__USE_MINGW_ANSI_STDIO
_CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES
MINGW_HAS_DDK_H
_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_MEMORY
__MINGW_HAVE_WIDE_C99_SCANF
__MINGW64_VERSION_BUGFIX
short
unsigned
while
__MINGW64_VERSION_STATE
const
struct tagLC_ID
double
struct threadlocaleinfostruct
struct
float
__MINGW_HAVE_ANSI_C99_SCANF
threadlocinfo
_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_COUNT
char
LPLC_ID
LC_ID
for
long
void
int
_locale_tstruct
default
MINGW_HAS_SECURE_API
_ARGMAX
else
sizeof
_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES
union
_VA_STRUCT_ALIGN
__MINGW32_MAJOR_VERSION
struct localeinfo_struct
register
_CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES_MEMORY
__MINGW64_VERSION_RC
switch
template<> struct __mingw_uuidof_s<type> {                   \
__MINGW32_MINOR_VERSION
case
if
static
typedef
_VA_ALIGN
continue
enum
signed
volatile
__MINGW_HAVE_WIDE_C99_PRINTF
__LONG32
do
__MINGW_HAVE_ANSI_C99_PRINTF
_locale_t
return
__MINGW64_VERSION_MINOR
__MINGW_HAS_DXSDK
break
_CRT_PACKING
__MINGW64_VERSION_MAJOR
extern
auto
goto
MINGW_HAS_DDRAW_H
__USE_MINGW_ANSI_STDIO
_CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES
MINGW_HAS_DDK_H
_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_MEMORY
__MINGW_HAVE_WIDE_C99_SCANF
__MINGW64_VERSION_BUGFIX
short
unsigned
while
__MINGW64_VERSION_STATE
const
struct tagLC_ID
_mingw_off_t.h
double
struct threadlocaleinfostruct
BUFSIZ
struct
float
__MINGW_HAVE_ANSI_C99_SCANF
threadlocinfo
_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_COUNT
char
LPLC_ID
LC_ID
FOPEN_MAX
for
long
SEEK_SET
void
int
_locale_tstruct
default
MINGW_HAS_SECURE_API
_ARGMAX
else
sizeof
_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES
union
_VA_STRUCT_ALIGN
__MINGW32_MAJOR_VERSION
struct localeinfo_struct
register
_CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES_MEMORY
__MINGW64_VERSION_RC
switch
template<> struct __mingw_uuidof_s<type> {                   \
__MINGW32_MINOR_VERSION
case
if
static
typedef
TMP_MAX
_VA_ALIGN
continue
enum
signed
volatile
__MINGW_HAVE_WIDE_C99_PRINTF
__LONG32
do
FILE
__MINGW_HAVE_ANSI_C99_PRINTF
_locale_t
return
__MINGW64_VERSION_MINOR
__MINGW_HAS_DXSDK
SEEK_CUR
break
_CRT_PACKING
__MINGW64_VERSION_MAJOR
extern
auto
goto
MINGW_HAS_DDRAW_H
SEEK_END
__USE_MINGW_ANSI_STDIO
_CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES
MINGW_HAS_DDK_H
struct _iobuf
_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_MEMORY
__MINGW_HAVE_WIDE_C99_SCANF
__MINGW64_VERSION_BUGFIX
short
FILENAME_MAX
_SYS_OPEN
unsigned
while
__MINGW64_VERSION_STATE
_IOB_ENTRIES
_NSTREAM_
const
struct tagLC_ID
swprintf.inl
vadefs.h
double
struct threadlocaleinfostruct
BUFSIZ
struct
float
__MINGW_HAVE_ANSI_C99_SCANF
threadlocinfo
_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_COUNT
char
LPLC_ID
LC_ID
FOPEN_MAX
for
long
SEEK_SET
void
int
_locale_tstruct
default
MINGW_HAS_SECURE_API
_ARGMAX
else
sizeof
_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES
union
_VA_STRUCT_ALIGN
__MINGW32_MAJOR_VERSION
struct localeinfo_struct
register
_CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES_MEMORY
__MINGW64_VERSION_RC
switch
template<> struct __mingw_uuidof_s<type> {                   \
__MINGW32_MINOR_VERSION
case
if
static
typedef
TMP_MAX
_VA_ALIGN
continue
enum
signed
volatile
__MINGW_HAVE_WIDE_C99_PRINTF
__LONG32
do
FILE
__MINGW_HAVE_ANSI_C99_PRINTF
_locale_t
return
__MINGW64_VERSION_MINOR
__MINGW_HAS_DXSDK
SEEK_CUR
break
_CRT_PACKING
__MINGW64_VERSION_MAJOR
extern
auto
goto
MINGW_HAS_DDRAW_H
SEEK_END
__USE_MINGW_ANSI_STDIO
_CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES
MINGW_HAS_DDK_H
struct _iobuf
_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_MEMORY
__MINGW_HAVE_WIDE_C99_SCANF
__MINGW64_VERSION_BUGFIX
short
FILENAME_MAX
_SYS_OPEN
unsigned
while
__MINGW64_VERSION_STATE
_IOB_ENTRIES
_NSTREAM_
const
struct tagLC_ID
sec_api/stdio_s.h
stdio.h
double
SYS_OPEN
struct threadlocaleinfostruct
BUFSIZ
struct
float
__MINGW_HAVE_ANSI_C99_SCANF
threadlocinfo
_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_COUNT
char
LPLC_ID
LC_ID
FOPEN_MAX
for
long
SEEK_SET
_WAIT_GRANDCHILD
void
int
_WAIT_CHILD
_locale_tstruct
default
MINGW_HAS_SECURE_API
_ARGMAX
else
sizeof
_P_WAIT
_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES
union
_OLD_P_OVERLAY
_VA_STRUCT_ALIGN
__MINGW32_MAJOR_VERSION
_P_NOWAITO
struct localeinfo_struct
register
_CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES_MEMORY
__MINGW64_VERSION_RC
switch
template<> struct __mingw_uuidof_s<type> {                   \
__MINGW32_MINOR_VERSION
case
if
static
typedef
TMP_MAX
_VA_ALIGN
continue
enum
signed
volatile
__MINGW_HAVE_WIDE_C99_PRINTF
__LONG32
do
FILE
__MINGW_HAVE_ANSI_C99_PRINTF
_locale_t
return
__MINGW64_VERSION_MINOR
_P_OVERLAY
__MINGW_HAS_DXSDK
_P_NOWAIT
SEEK_CUR
break
_CRT_PACKING
__MINGW64_VERSION_MAJOR
_P_DETACH
extern
auto
goto
MINGW_HAS_DDRAW_H
SEEK_END
__USE_MINGW_ANSI_STDIO
_CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES
MINGW_HAS_DDK_H
struct _iobuf
_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_MEMORY
__MINGW_HAVE_WIDE_C99_SCANF
__MINGW64_VERSION_BUGFIX
short
FILENAME_MAX
_SYS_OPEN
unsigned
while
__MINGW64_VERSION_STATE
_IOB_ENTRIES
_NSTREAM_
const
struct tagLC_ID
double
SYS_OPEN
struct threadlocaleinfostruct
BUFSIZ
struct
float
__MINGW_HAVE_ANSI_C99_SCANF
threadlocinfo
_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_COUNT
char
LPLC_ID
LC_ID
FOPEN_MAX
for
long
SEEK_SET
_WAIT_GRANDCHILD
void
int
_WAIT_CHILD
_locale_tstruct
default
MINGW_HAS_SECURE_API
_ARGMAX
else
sizeof
_P_WAIT
_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES
union
_OLD_P_OVERLAY
_VA_STRUCT_ALIGN
__MINGW32_MAJOR_VERSION
_P_NOWAITO
struct localeinfo_struct
register
_CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES_MEMORY
__MINGW64_VERSION_RC
switch
template<> struct __mingw_uuidof_s<type> {                   \
__MINGW32_MINOR_VERSION
case
if
static
typedef
TMP_MAX
_VA_ALIGN
continue
enum
signed
volatile
__MINGW_HAVE_WIDE_C99_PRINTF
__LONG32
do
FILE
__MINGW_HAVE_ANSI_C99_PRINTF
_locale_t
return
__MINGW64_VERSION_MINOR
_P_OVERLAY
__MINGW_HAS_DXSDK
_P_NOWAIT
SEEK_CUR
break
_CRT_PACKING
__MINGW64_VERSION_MAJOR
_P_DETACH
extern
auto
goto
MINGW_HAS_DDRAW_H
SEEK_END
__USE_MINGW_ANSI_STDIO
_CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES
MINGW_HAS_DDK_H
struct _iobuf
_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_MEMORY
__MINGW_HAVE_WIDE_C99_SCANF
__MINGW64_VERSION_BUGFIX
short
FILENAME_MAX
_SYS_OPEN
unsigned
while
__MINGW64_VERSION_STATE
_IOB_ENTRIES
_NSTREAM_
const
struct tagLC_ID
Eight2
double
SYS_OPEN
struct threadlocaleinfostruct
struct example1
BUFSIZ
struct
float
__MINGW_HAVE_ANSI_C99_SCANF
threadlocinfo
_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_COUNT
char
LPLC_ID
Eight
LC_ID
struct example2
FOPEN_MAX
struct example4
for
long
SEEK_SET
newStructThing
_WAIT_GRANDCHILD
void
int
_WAIT_CHILD
struct example3
_locale_tstruct
default
MINGW_HAS_SECURE_API
_ARGMAX
else
sizeof
_P_WAIT
_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES
union
_OLD_P_OVERLAY
_VA_STRUCT_ALIGN
__MINGW32_MAJOR_VERSION
_P_NOWAITO
struct localeinfo_struct
register
_CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES_MEMORY
__MINGW64_VERSION_RC
switch
template<> struct __mingw_uuidof_s<type> {                   \
__MINGW32_MINOR_VERSION
case
if
static
typedef
TMP_MAX
_VA_ALIGN
continue
enum
signed
volatile
__MINGW_HAVE_WIDE_C99_PRINTF
__LONG32
do
FILE
__MINGW_HAVE_ANSI_C99_PRINTF
_locale_t
return
__MINGW64_VERSION_MINOR
_P_OVERLAY
__MINGW_HAS_DXSDK
_P_NOWAIT
mychar
SEEK_CUR
break
_CRT_PACKING
__MINGW64_VERSION_MAJOR
_P_DETACH
extern
auto
goto
MINGW_HAS_DDRAW_H
SEEK_END
__USE_MINGW_ANSI_STDIO
_CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES
MINGW_HAS_DDK_H
struct _iobuf
_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_MEMORY
__MINGW_HAVE_WIDE_C99_SCANF
__MINGW64_VERSION_BUGFIX
short
FILENAME_MAX
_SYS_OPEN
unsigned
while
__MINGW64_VERSION_STATE
_IOB_ENTRIES
_NSTREAM_
const
struct tagLC_ID
int32
97
Eight2
double
SYS_OPEN
struct threadlocaleinfostruct
struct example1
BUFSIZ
struct
float
__MINGW_HAVE_ANSI_C99_SCANF
threadlocinfo
_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_COUNT
char
LPLC_ID
Eight
LC_ID
struct example2
FOPEN_MAX
struct example4
for
long
SEEK_SET
newStructThing
_WAIT_GRANDCHILD
void
int
_WAIT_CHILD
struct example3
_locale_tstruct
default
MINGW_HAS_SECURE_API
_ARGMAX
else
sizeof
_P_WAIT
_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES
union
_OLD_P_OVERLAY
_VA_STRUCT_ALIGN
__MINGW32_MAJOR_VERSION
_P_NOWAITO
struct localeinfo_struct
register
_CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES_MEMORY
__MINGW64_VERSION_RC
switch
template<> struct __mingw_uuidof_s<type> {                   \
__MINGW32_MINOR_VERSION
case
if
static
typedef
TMP_MAX
_VA_ALIGN
continue
enum
signed
volatile
__MINGW_HAVE_WIDE_C99_PRINTF
__LONG32
do
FILE
__MINGW_HAVE_ANSI_C99_PRINTF
_locale_t
return
__MINGW64_VERSION_MINOR
_P_OVERLAY
__MINGW_HAS_DXSDK
_P_NOWAIT
mychar
SEEK_CUR
break
_CRT_PACKING
__MINGW64_VERSION_MAJOR
_P_DETACH
extern
auto
goto
MINGW_HAS_DDRAW_H
SEEK_END
__USE_MINGW_ANSI_STDIO
_CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES
MINGW_HAS_DDK_H
struct _iobuf
_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_MEMORY
__MINGW_HAVE_WIDE_C99_SCANF
__MINGW64_VERSION_BUGFIX
short
FILENAME_MAX
_SYS_OPEN
unsigned
while
__MINGW64_VERSION_STATE
_IOB_ENTRIES
_NSTREAM_
const
struct tagLC_ID
int32
97
stdio.h
crtdefs.h
corecrt.h
_mingw.h
_mingw_mac.h
float
__MINGW64_VERSION_BUGFIX
do
typedef
register
auto
char
unsigned
int
default
__MINGW32_MAJOR_VERSION
else
__MINGW64_VERSION_MINOR
while
switch
__MINGW_HAVE_WIDE_C99_PRINTF
__MINGW_HAVE_WIDE_C99_SCANF
continue
__MINGW_HAVE_ANSI_C99_PRINTF
__MINGW64_VERSION_RC
__MINGW_HAVE_ANSI_C99_SCANF
union
if
short
static
volatile
break
void
extern
__MINGW64_VERSION_MAJOR
sizeof
__MINGW64_VERSION_STATE
double
__MINGW32_MINOR_VERSION
long
for
case
enum
return
const
struct
goto
signed
_mingw_secapi.h
_CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES_MEMORY
float
__MINGW64_VERSION_BUGFIX
do
typedef
register
auto
char
unsigned
int
default
__MINGW32_MAJOR_VERSION
else
__MINGW64_VERSION_MINOR
while
switch
__MINGW_HAVE_WIDE_C99_PRINTF
__MINGW_HAVE_WIDE_C99_SCANF
continue
__MINGW_HAVE_ANSI_C99_PRINTF
__MINGW64_VERSION_RC
__MINGW_HAVE_ANSI_C99_SCANF
union
_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_MEMORY
if
short
static
volatile
break
void
extern
__MINGW64_VERSION_MAJOR
sizeof
__MINGW64_VERSION_STATE
double
__MINGW32_MINOR_VERSION
long
for
case
enum
_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_COUNT
return
_CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES
_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES
const
struct
goto
signed
vadefs.h
_mingw.h
_CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES_MEMORY
float
__MINGW64_VERSION_BUGFIX
_VA_ALIGN
do
typedef
register
auto
char
unsigned
int
default
__MINGW32_MAJOR_VERSION
else
_CRT_PACKING
__MINGW64_VERSION_MINOR
while
switch
__MINGW_HAVE_WIDE_C99_PRINTF
__MINGW_HAVE_WIDE_C99_SCANF
continue
__LONG32
__MINGW_HAVE_ANSI_C99_PRINTF
__MINGW64_VERSION_RC
__MINGW_HAVE_ANSI_C99_SCANF
union
_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_MEMORY
if
short
static
volatile
break
void
extern
__MINGW64_VERSION_MAJOR
sizeof
__MINGW64_VERSION_STATE
double
__MINGW32_MINOR_VERSION
long
for
case
enum
_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_COUNT
return
_CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES
_VA_STRUCT_ALIGN
_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES
const
struct
goto
signed
sdks/_mingw_directx.h
_CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES_MEMORY
float
__MINGW64_VERSION_BUGFIX
_VA_ALIGN
do
typedef
register
auto
MINGW_HAS_DDRAW_H
char
unsigned
int
default
MINGW_HAS_SECURE_API
__MINGW32_MAJOR_VERSION
else
_CRT_PACKING
__MINGW64_VERSION_MINOR
while
switch
__MINGW_HAVE_WIDE_C99_PRINTF
__MINGW_HAVE_WIDE_C99_SCANF
continue
__LONG32
template<> struct __mingw_uuidof_s<type> {                   \
__MINGW_HAVE_ANSI_C99_PRINTF
__MINGW64_VERSION_RC
__MINGW_HAVE_ANSI_C99_SCANF
union
_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_MEMORY
if
_ARGMAX
short
static
volatile
break
void
extern
__USE_MINGW_ANSI_STDIO
__MINGW64_VERSION_MAJOR
sizeof
__MINGW64_VERSION_STATE
double
__MINGW32_MINOR_VERSION
long
for
case
enum
_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_COUNT
return
_CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES
_VA_STRUCT_ALIGN
_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES
const
__MINGW_HAS_DXSDK
struct
goto
signed
sdks/_mingw_ddk.h
_CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES_MEMORY
float
__MINGW64_VERSION_BUGFIX
_VA_ALIGN
do
typedef
register
auto
MINGW_HAS_DDRAW_H
char
unsigned
int
default
MINGW_HAS_SECURE_API
__MINGW32_MAJOR_VERSION
else
_CRT_PACKING
__MINGW64_VERSION_MINOR
while
switch
__MINGW_HAVE_WIDE_C99_PRINTF
__MINGW_HAVE_WIDE_C99_SCANF
continue
__LONG32
template<> struct __mingw_uuidof_s<type> {                   \
__MINGW_HAVE_ANSI_C99_PRINTF
__MINGW64_VERSION_RC
__MINGW_HAVE_ANSI_C99_SCANF
union
_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_MEMORY
MINGW_HAS_DDK_H
if
_ARGMAX
short
static
volatile
break
void
extern
__USE_MINGW_ANSI_STDIO
__MINGW64_VERSION_MAJOR
sizeof
__MINGW64_VERSION_STATE
double
__MINGW32_MINOR_VERSION
long
for
case
enum
_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_COUNT
return
_CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES
_VA_STRUCT_ALIGN
_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES
const
__MINGW_HAS_DXSDK
struct
goto
signed
_CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES_MEMORY
float
__MINGW64_VERSION_BUGFIX
_VA_ALIGN
do
typedef
register
auto
MINGW_HAS_DDRAW_H
char
unsigned
int
default
MINGW_HAS_SECURE_API
__MINGW32_MAJOR_VERSION
else
_CRT_PACKING
__MINGW64_VERSION_MINOR
while
switch
__MINGW_HAVE_WIDE_C99_PRINTF
__MINGW_HAVE_WIDE_C99_SCANF
continue
__LONG32
template<> struct __mingw_uuidof_s<type> {                   \
__MINGW_HAVE_ANSI_C99_PRINTF
__MINGW64_VERSION_RC
__MINGW_HAVE_ANSI_C99_SCANF
union
_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_MEMORY
MINGW_HAS_DDK_H
if
_ARGMAX
short
static
volatile
break
void
extern
__USE_MINGW_ANSI_STDIO
__MINGW64_VERSION_MAJOR
sizeof
__MINGW64_VERSION_STATE
double
__MINGW32_MINOR_VERSION
long
for
case
enum
_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_COUNT
return
_CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES
_VA_STRUCT_ALIGN
_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES
const
__MINGW_HAS_DXSDK
struct
goto
signed
double
struct threadlocaleinfostruct
struct
float
__MINGW_HAVE_ANSI_C99_SCANF
threadlocinfo
_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_COUNT
char
LPLC_ID
LC_ID
for
long
void
int
_locale_tstruct
default
MINGW_HAS_SECURE_API
_ARGMAX
else
sizeof
_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES
union
_VA_STRUCT_ALIGN
__MINGW32_MAJOR_VERSION
struct localeinfo_struct
register
_CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES_MEMORY
__MINGW64_VERSION_RC
switch
template<> struct __mingw_uuidof_s<type> {                   \
__MINGW32_MINOR_VERSION
case
if
static
typedef
_VA_ALIGN
continue
enum
signed
volatile
__MINGW_HAVE_WIDE_C99_PRINTF
__LONG32
do
__MINGW_HAVE_ANSI_C99_PRINTF
_locale_t
return
__MINGW64_VERSION_MINOR
__MINGW_HAS_DXSDK
break
_CRT_PACKING
__MINGW64_VERSION_MAJOR
extern
auto
goto
MINGW_HAS_DDRAW_H
__USE_MINGW_ANSI_STDIO
_CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES
MINGW_HAS_DDK_H
_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_MEMORY
__MINGW_HAVE_WIDE_C99_SCANF
__MINGW64_VERSION_BUGFIX
short
unsigned
while
__MINGW64_VERSION_STATE
const
struct tagLC_ID
double
struct threadlocaleinfostruct
struct
float
__MINGW_HAVE_ANSI_C99_SCANF
threadlocinfo
_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_COUNT
char
LPLC_ID
LC_ID
for
long
void
int
_locale_tstruct
default
MINGW_HAS_SECURE_API
_ARGMAX
else
sizeof
_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES
union
_VA_STRUCT_ALIGN
__MINGW32_MAJOR_VERSION
struct localeinfo_struct
register
_CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES_MEMORY
__MINGW64_VERSION_RC
switch
template<> struct __mingw_uuidof_s<type> {                   \
__MINGW32_MINOR_VERSION
case
if
static
typedef
_VA_ALIGN
continue
enum
signed
volatile
__MINGW_HAVE_WIDE_C99_PRINTF
__LONG32
do
__MINGW_HAVE_ANSI_C99_PRINTF
_locale_t
return
__MINGW64_VERSION_MINOR
__MINGW_HAS_DXSDK
break
_CRT_PACKING
__MINGW64_VERSION_MAJOR
extern
auto
goto
MINGW_HAS_DDRAW_H
__USE_MINGW_ANSI_STDIO
_CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES
MINGW_HAS_DDK_H
_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_MEMORY
__MINGW_HAVE_WIDE_C99_SCANF
__MINGW64_VERSION_BUGFIX
short
unsigned
while
__MINGW64_VERSION_STATE
const
struct tagLC_ID
_mingw_off_t.h
double
struct threadlocaleinfostruct
BUFSIZ
struct
float
__MINGW_HAVE_ANSI_C99_SCANF
threadlocinfo
_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_COUNT
char
LPLC_ID
LC_ID
FOPEN_MAX
for
long
SEEK_SET
void
int
_locale_tstruct
default
MINGW_HAS_SECURE_API
_ARGMAX
else
sizeof
_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES
union
_VA_STRUCT_ALIGN
__MINGW32_MAJOR_VERSION
struct localeinfo_struct
register
_CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES_MEMORY
__MINGW64_VERSION_RC
switch
template<> struct __mingw_uuidof_s<type> {                   \
__MINGW32_MINOR_VERSION
case
if
static
typedef
TMP_MAX
_VA_ALIGN
continue
enum
signed
volatile
__MINGW_HAVE_WIDE_C99_PRINTF
__LONG32
do
FILE
__MINGW_HAVE_ANSI_C99_PRINTF
_locale_t
return
__MINGW64_VERSION_MINOR
__MINGW_HAS_DXSDK
SEEK_CUR
break
_CRT_PACKING
__MINGW64_VERSION_MAJOR
extern
auto
goto
MINGW_HAS_DDRAW_H
SEEK_END
__USE_MINGW_ANSI_STDIO
_CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES
MINGW_HAS_DDK_H
struct _iobuf
_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_MEMORY
__MINGW_HAVE_WIDE_C99_SCANF
__MINGW64_VERSION_BUGFIX
short
FILENAME_MAX
_SYS_OPEN
unsigned
while
__MINGW64_VERSION_STATE
_IOB_ENTRIES
_NSTREAM_
const
struct tagLC_ID
swprintf.inl
vadefs.h
double
struct threadlocaleinfostruct
BUFSIZ
struct
float
__MINGW_HAVE_ANSI_C99_SCANF
threadlocinfo
_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_COUNT
char
LPLC_ID
LC_ID
FOPEN_MAX
for
long
SEEK_SET
void
int
_locale_tstruct
default
MINGW_HAS_SECURE_API
_ARGMAX
else
sizeof
_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES
union
_VA_STRUCT_ALIGN
__MINGW32_MAJOR_VERSION
struct localeinfo_struct
register
_CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES_MEMORY
__MINGW64_VERSION_RC
switch
template<> struct __mingw_uuidof_s<type> {                   \
__MINGW32_MINOR_VERSION
case
if
static
typedef
TMP_MAX
_VA_ALIGN
continue
enum
signed
volatile
__MINGW_HAVE_WIDE_C99_PRINTF
__LONG32
do
FILE
__MINGW_HAVE_ANSI_C99_PRINTF
_locale_t
return
__MINGW64_VERSION_MINOR
__MINGW_HAS_DXSDK
SEEK_CUR
break
_CRT_PACKING
__MINGW64_VERSION_MAJOR
extern
auto
goto
MINGW_HAS_DDRAW_H
SEEK_END
__USE_MINGW_ANSI_STDIO
_CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES
MINGW_HAS_DDK_H
struct _iobuf
_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_MEMORY
__MINGW_HAVE_WIDE_C99_SCANF
__MINGW64_VERSION_BUGFIX
short
FILENAME_MAX
_SYS_OPEN
unsigned
while
__MINGW64_VERSION_STATE
_IOB_ENTRIES
_NSTREAM_
const
struct tagLC_ID
sec_api/stdio_s.h
stdio.h
double
SYS_OPEN
struct threadlocaleinfostruct
BUFSIZ
struct
float
__MINGW_HAVE_ANSI_C99_SCANF
threadlocinfo
_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_COUNT
char
LPLC_ID
LC_ID
FOPEN_MAX
for
long
SEEK_SET
_WAIT_GRANDCHILD
void
int
_WAIT_CHILD
_locale_tstruct
default
MINGW_HAS_SECURE_API
_ARGMAX
else
sizeof
_P_WAIT
_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES
union
_OLD_P_OVERLAY
_VA_STRUCT_ALIGN
__MINGW32_MAJOR_VERSION
_P_NOWAITO
struct localeinfo_struct
register
_CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES_MEMORY
__MINGW64_VERSION_RC
switch
template<> struct __mingw_uuidof_s<type> {                   \
__MINGW32_MINOR_VERSION
case
if
static
typedef
TMP_MAX
_VA_ALIGN
continue
enum
signed
volatile
__MINGW_HAVE_WIDE_C99_PRINTF
__LONG32
do
FILE
__MINGW_HAVE_ANSI_C99_PRINTF
_locale_t
return
__MINGW64_VERSION_MINOR
_P_OVERLAY
__MINGW_HAS_DXSDK
_P_NOWAIT
SEEK_CUR
break
_CRT_PACKING
__MINGW64_VERSION_MAJOR
_P_DETACH
extern
auto
goto
MINGW_HAS_DDRAW_H
SEEK_END
__USE_MINGW_ANSI_STDIO
_CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES
MINGW_HAS_DDK_H
struct _iobuf
_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_MEMORY
__MINGW_HAVE_WIDE_C99_SCANF
__MINGW64_VERSION_BUGFIX
short
FILENAME_MAX
_SYS_OPEN
unsigned
while
__MINGW64_VERSION_STATE
_IOB_ENTRIES
_NSTREAM_
const
struct tagLC_ID
double
SYS_OPEN
struct threadlocaleinfostruct
BUFSIZ
struct
float
__MINGW_HAVE_ANSI_C99_SCANF
threadlocinfo
_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_COUNT
char
LPLC_ID
LC_ID
FOPEN_MAX
for
long
SEEK_SET
_WAIT_GRANDCHILD
void
int
_WAIT_CHILD
_locale_tstruct
default
MINGW_HAS_SECURE_API
_ARGMAX
else
sizeof
_P_WAIT
_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES
union
_OLD_P_OVERLAY
_VA_STRUCT_ALIGN
__MINGW32_MAJOR_VERSION
_P_NOWAITO
struct localeinfo_struct
register
_CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES_MEMORY
__MINGW64_VERSION_RC
switch
template<> struct __mingw_uuidof_s<type> {                   \
__MINGW32_MINOR_VERSION
case
if
static
typedef
TMP_MAX
_VA_ALIGN
continue
enum
signed
volatile
__MINGW_HAVE_WIDE_C99_PRINTF
__LONG32
do
FILE
__MINGW_HAVE_ANSI_C99_PRINTF
_locale_t
return
__MINGW64_VERSION_MINOR
_P_OVERLAY
__MINGW_HAS_DXSDK
_P_NOWAIT
SEEK_CUR
break
_CRT_PACKING
__MINGW64_VERSION_MAJOR
_P_DETACH
extern
auto
goto
MINGW_HAS_DDRAW_H
SEEK_END
__USE_MINGW_ANSI_STDIO
_CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES
MINGW_HAS_DDK_H
struct _iobuf
_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_MEMORY
__MINGW_HAVE_WIDE_C99_SCANF
__MINGW64_VERSION_BUGFIX
short
FILENAME_MAX
_SYS_OPEN
unsigned
while
__MINGW64_VERSION_STATE
_IOB_ENTRIES
_NSTREAM_
const
struct tagLC_ID
Eight2
double
SYS_OPEN
struct threadlocaleinfostruct
struct example1
BUFSIZ
struct
float
__MINGW_HAVE_ANSI_C99_SCANF
threadlocinfo
_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_COUNT
char
LPLC_ID
Eight
LC_ID
struct example2
FOPEN_MAX
for
long
SEEK_SET
newStructThing
_WAIT_GRANDCHILD
void
int
_WAIT_CHILD
struct example3
_locale_tstruct
default
MINGW_HAS_SECURE_API
_ARGMAX
else
sizeof
_P_WAIT
_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES
union
_OLD_P_OVERLAY
_VA_STRUCT_ALIGN
__MINGW32_MAJOR_VERSION
_P_NOWAITO
struct localeinfo_struct
register
_CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES_MEMORY
__MINGW64_VERSION_RC
switch
template<> struct __mingw_uuidof_s<type> {                   \
__MINGW32_MINOR_VERSION
case
if
static
typedef
TMP_MAX
_VA_ALIGN
continue
enum
signed
volatile
__MINGW_HAVE_WIDE_C99_PRINTF
__LONG32
do
FILE
__MINGW_HAVE_ANSI_C99_PRINTF
_locale_t
return
__MINGW64_VERSION_MINOR
_P_OVERLAY
__MINGW_HAS_DXSDK
_P_NOWAIT
mychar
SEEK_CUR
break
_CRT_PACKING
__MINGW64_VERSION_MAJOR
_P_DETACH
extern
auto
goto
MINGW_HAS_DDRAW_H
SEEK_END
__USE_MINGW_ANSI_STDIO
_CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES
MINGW_HAS_DDK_H
struct _iobuf
_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_MEMORY
__MINGW_HAVE_WIDE_C99_SCANF
__MINGW64_VERSION_BUGFIX
short
FILENAME_MAX
_SYS_OPEN
unsigned
while
__MINGW64_VERSION_STATE
_IOB_ENTRIES
_NSTREAM_
const
struct tagLC_ID
int32
96
Eight2
double
SYS_OPEN
struct threadlocaleinfostruct
struct example1
BUFSIZ
struct
float
__MINGW_HAVE_ANSI_C99_SCANF
threadlocinfo
_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_COUNT
char
LPLC_ID
Eight
LC_ID
struct example2
FOPEN_MAX
for
long
SEEK_SET
newStructThing
_WAIT_GRANDCHILD
void
int
_WAIT_CHILD
struct example3
_locale_tstruct
default
MINGW_HAS_SECURE_API
_ARGMAX
else
sizeof
_P_WAIT
_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES
union
_OLD_P_OVERLAY
_VA_STRUCT_ALIGN
__MINGW32_MAJOR_VERSION
_P_NOWAITO
struct localeinfo_struct
register
_CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES_MEMORY
__MINGW64_VERSION_RC
switch
template<> struct __mingw_uuidof_s<type> {                   \
__MINGW32_MINOR_VERSION
case
if
static
typedef
TMP_MAX
_VA_ALIGN
continue
enum
signed
volatile
__MINGW_HAVE_WIDE_C99_PRINTF
__LONG32
do
FILE
__MINGW_HAVE_ANSI_C99_PRINTF
_locale_t
return
__MINGW64_VERSION_MINOR
_P_OVERLAY
__MINGW_HAS_DXSDK
_P_NOWAIT
mychar
SEEK_CUR
break
_CRT_PACKING
__MINGW64_VERSION_MAJOR
_P_DETACH
extern
auto
goto
MINGW_HAS_DDRAW_H
SEEK_END
__USE_MINGW_ANSI_STDIO
_CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES
MINGW_HAS_DDK_H
struct _iobuf
_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_MEMORY
__MINGW_HAVE_WIDE_C99_SCANF
__MINGW64_VERSION_BUGFIX
short
FILENAME_MAX
_SYS_OPEN
unsigned
while
__MINGW64_VERSION_STATE
_IOB_ENTRIES
_NSTREAM_
const
struct tagLC_ID
int32
96
evar1
..\..\..\ToolsExe\Client2\bin\Debug\Client2.exe
functions
{"void spoi(char* a, char b)":{"content":"{ \n\tif (num == null)\n\r\t{\n\r\t\tprintf(\"ssss\");\n\r\t}\n\r\t*num = 0;\n\r}\n\r","parameters":[{"parameterName":"a","parameterType":"char*"},{"parameterName":"b","parameterType":"char"}],"returnType":"void","documentation":"/*\n\r* sends a message to a client\n\r* @params:\n\r* podd - the initsdfsdfsdfsdf\n\r* odpdf - kkdlldkdkfkdf\n\r  whichis doing siht\n\r* a - size -the size of the buffer\n\r* retval - sdfsdf\n\r* @returns:\n\r* if the messege  djfdjfddn dfkdf mdfdk dfm\n\r*/\n\r","codeLength":5,"variables":[{"parameterName":"a","parameterType":"int"},{"parameterName":"b","parameterType":"int"},{"parameterName":"a","parameterType":"int"}],"fName":"spoi","exitPointsAmount":0,"allExitPoints":[],"pattern":"([^\\s]+)?void[\\s\\*]+spoi[\\s(]+char\\*[\\s\\*]+a[,\\s]+char[\\s\\*]+b[)\\s]+$","memoryAllocation":false,"memoryRelease":false,"calledFromFunc":["static int* main(int* podd, int** odpdf, char a, char* retval)"]},"static int* main(int* podd, int** odpdf, char a, char* retval)":{"content":"{ \n\tint num;\n\r\tstruct example1 temp;\n\r\tstruct example3 {\n\r\t\tint a;\n\r\t\tint b;\n\r\t};\n\r\tstruct example3 d;\n\r\tint*** s;\n\r\tint max = 5;\n\r\tif (max)\n\r\t{\n\r\t\tint max2 = max;\n\r\t}\n\r\tchar* yosi = \"a\";\n\r\tchar dosi = \"s\";\n\r\t#ifdef evar1\n\r\tstruct example4 {\n\r\t\tint a;\n\r\t\tint b;\n\r\t};\n\r\tint resultttt;\n\r\t#endif\n\r\tspoi(yosi, dosi);\n\r\t//dfgdfgdfgdfg\n\r\t//fgfgfgfgfg\n\r\tchar* pointer = malloc(sizeof(char) * 10);\n\r\t//dfgdfgdfgdfg\n\r\t//fgfgfgfgfg\n\r\t/*\n\r\t#ifdef Eight\n\r\tint EightIsGood;\n\r\t#endif\n\r\tchar* runner = pointer;\n\r\t*retval = pointer;\n\r\t/*                  sdfsdfsdfsd*/\n\r\tchar** pointer2 = calloc(10, sizeof(char));\n\r\t/*\n\r\tif (!pointer2)\n\r\t{\n\r\t\tprinf(\"checked\");\n\r\t}\n\r\tfor (int i = 0; i < max; i++)\n\r\t{\n\r\t\t*runner = 'a';\n\r\t\trunner++;\n\r\t}\n\r\t*runner = '\\0';\n\r\tchar* pointer5 = alloc(sizeof(char) * 10);\n\r\tchar* pointer4 = pointer5;\n\r\tchar* pointer6 = pointer4;\n\r\t/*\n\r\tputs(pointer);\n\r\treturn 0;\n\r\t\n\r}\n\r\n\r","parameters":[{"parameterName":"podd","parameterType":"int*"},{"parameterName":"odpdf","parameterType":"int**"},{"parameterName":"a","parameterType":"char"},{"parameterName":"retval","parameterType":"char*"}],"returnType":"int","documentation":"","codeLength":62,"variables":[{"parameterName":"num","parameterType":"int"},{"parameterName":"temp","parameterType":"structexample1"},{"parameterName":"d","parameterType":"structexample3"},{"parameterName":"s","parameterType":"int***"},{"parameterName":"max","parameterType":"int"},{"parameterName":"yosi","parameterType":"char*"},{"parameterName":"dosi","parameterType":"char"},{"parameterName":"resultttt","parameterType":"int"},{"parameterName":"pointer","parameterType":"char*"},{"parameterName":"EightIsGood","parameterType":"int"},{"parameterName":"runner","parameterType":"char*"},{"parameterName":"pointer2","parameterType":"char**"},{"parameterName":"pointer5","parameterType":"char*"},{"parameterName":"pointer4","parameterType":"char*"},{"parameterName":"pointer6","parameterType":"char*"}],"fName":"main","exitPointsAmount":1,"allExitPoints":["return 0;"],"pattern":"([^\\s]+)?int[\\s\\*]+main[\\s(]+int\\*[\\s\\*]+podd[,\\s]+int\\*\\*[\\s\\*]+odpdf[,\\s]+char[\\s\\*]+a[,\\s]+char\\*[\\s\\*]+retval[)\\s]+$","memoryAllocation":true,"memoryRelease":false,"calledFromFunc":[]}}
"logs logs logs logs \n logs logs logs \n another logs and another logs \n yay !"
evar2
..\..\..\ToolsExe\Client2\bin\Debug\Client2.exe
functions
{"void spoi(char* a, char b)":{"content":"{ \n\tif (num == null)\n\r\t{\n\r\t\tprintf(\"ssss\");\n\r\t}\n\r\t*num = 0;\n\r}\n\r","parameters":[{"parameterName":"a","parameterType":"char*"},{"parameterName":"b","parameterType":"char"}],"returnType":"void","documentation":"/*\n\r* sends a message to a client\n\r* @params:\n\r* podd - the initsdfsdfsdfsdf\n\r* odpdf - kkdlldkdkfkdf\n\r  whichis doing siht\n\r* a - size -the size of the buffer\n\r* retval - sdfsdf\n\r* @returns:\n\r* if the messege  djfdjfddn dfkdf mdfdk dfm\n\r*/\n\r","codeLength":5,"variables":[{"parameterName":"a","parameterType":"int"},{"parameterName":"b","parameterType":"int"},{"parameterName":"a","parameterType":"int"}],"fName":"spoi","exitPointsAmount":0,"allExitPoints":[],"pattern":"([^\\s]+)?void[\\s\\*]+spoi[\\s(]+char\\*[\\s\\*]+a[,\\s]+char[\\s\\*]+b[)\\s]+$","memoryAllocation":false,"memoryRelease":false,"calledFromFunc":["static int* main(int* podd, int** odpdf, char a, char* retval)"]},"static int* main(int* podd, int** odpdf, char a, char* retval)":{"content":"{ \n\tint num;\n\r\tstruct example1 temp;\n\r\tstruct example3 {\n\r\t\tint a;\n\r\t\tint b;\n\r\t};\n\r\tstruct example3 d;\n\r\tint*** s;\n\r\tint max = 5;\n\r\tif (max)\n\r\t{\n\r\t\tint max2 = max;\n\r\t}\n\r\tchar* yosi = \"a\";\n\r\tchar dosi = \"s\";\n\r\t#ifdef evar1\n\r\tspoi(yosi, dosi);\n\r\t//dfgdfgdfgdfg\n\r\t//fgfgfgfgfg\n\r\tchar* pointer = malloc(sizeof(char) * 10);\n\r\t//dfgdfgdfgdfg\n\r\t//fgfgfgfgfg\n\r\t/*\n\r\t#ifdef Eight\n\r\tint EightIsGood;\n\r\t#endif\n\r\tchar* runner = pointer;\n\r\t*retval = pointer;\n\r\t/*                  sdfsdfsdfsd*/\n\r\tchar** pointer2 = calloc(10, sizeof(char));\n\r\t/*\n\r\tif (!pointer2)\n\r\t{\n\r\t\tprinf(\"checked\");\n\r\t}\n\r\tfor (int i = 0; i < max; i++)\n\r\t{\n\r\t\t*runner = 'a';\n\r\t\trunner++;\n\r\t}\n\r\t*runner = '\\0';\n\r\tchar* pointer5 = alloc(sizeof(char) * 10);\n\r\tchar* pointer4 = pointer5;\n\r\tchar* pointer6 = pointer4;\n\r\t/*\n\r\tputs(pointer);\n\r\treturn 0;\n\r\t\n\r}\n\r\n\r","parameters":[{"parameterName":"podd","parameterType":"int*"},{"parameterName":"odpdf","parameterType":"int**"},{"parameterName":"a","parameterType":"char"},{"parameterName":"retval","parameterType":"char*"}],"returnType":"int","documentation":"","codeLength":62,"variables":[{"parameterName":"num","parameterType":"int"},{"parameterName":"temp","parameterType":"structexample1"},{"parameterName":"d","parameterType":"structexample3"},{"parameterName":"s","parameterType":"int***"},{"parameterName":"max","parameterType":"int"},{"parameterName":"yosi","parameterType":"char*"},{"parameterName":"dosi","parameterType":"char"},{"parameterName":"pointer","parameterType":"char*"},{"parameterName":"EightIsGood","parameterType":"int"},{"parameterName":"runner","parameterType":"char*"},{"parameterName":"pointer2","parameterType":"char**"},{"parameterName":"pointer5","parameterType":"char*"},{"parameterName":"pointer4","parameterType":"char*"},{"parameterName":"pointer6","parameterType":"char*"}],"fName":"main","exitPointsAmount":1,"allExitPoints":["return 0;"],"pattern":"([^\\s]+)?int[\\s\\*]+main[\\s(]+int\\*[\\s\\*]+podd[,\\s]+int\\*\\*[\\s\\*]+odpdf[,\\s]+char[\\s\\*]+a[,\\s]+char\\*[\\s\\*]+retval[)\\s]+$","memoryAllocation":true,"memoryRelease":false,"calledFromFunc":[]}}
"logs logs logs logs \n logs logs logs \n another logs and another logs \n yay !"
evar1,evar2
..\..\..\ToolsExe\Client2\bin\Debug\Client2.exe
functions
{"void spoi(char* a, char b)":{"content":"{ \n\tif (num == null)\n\r\t{\n\r\t\tprintf(\"ssss\");\n\r\t}\n\r\t*num = 0;\n\r}\n\r","parameters":[{"parameterName":"a","parameterType":"char*"},{"parameterName":"b","parameterType":"char"}],"returnType":"void","documentation":"/*\n\r* sends a message to a client\n\r* @params:\n\r* podd - the initsdfsdfsdfsdf\n\r* odpdf - kkdlldkdkfkdf\n\r  whichis doing siht\n\r* a - size -the size of the buffer\n\r* retval - sdfsdf\n\r* @returns:\n\r* if the messege  djfdjfddn dfkdf mdfdk dfm\n\r*/\n\r","codeLength":5,"variables":[{"parameterName":"a","parameterType":"int"},{"parameterName":"b","parameterType":"int"},{"parameterName":"a","parameterType":"int"}],"fName":"spoi","exitPointsAmount":0,"allExitPoints":[],"pattern":"([^\\s]+)?void[\\s\\*]+spoi[\\s(]+char\\*[\\s\\*]+a[,\\s]+char[\\s\\*]+b[)\\s]+$","memoryAllocation":false,"memoryRelease":false,"calledFromFunc":["static int* main(int* podd, int** odpdf, char a, char* retval)"]},"static int* main(int* podd, int** odpdf, char a, char* retval)":{"content":"{ \n\tint num;\n\r\tstruct example1 temp;\n\r\tstruct example3 {\n\r\t\tint a;\n\r\t\tint b;\n\r\t};\n\r\tstruct example3 d;\n\r\tint*** s;\n\r\tint max = 5;\n\r\tif (max)\n\r\t{\n\r\t\tint max2 = max;\n\r\t}\n\r\tchar* yosi = \"a\";\n\r\tchar dosi = \"s\";\n\r\t#ifdef evar1\n\r\tstruct example4 {\n\r\t\tint a;\n\r\t\tint b;\n\r\t};\n\r\tint resultttt;\n\r\t#endif\n\r\tspoi(yosi, dosi);\n\r\t//dfgdfgdfgdfg\n\r\t//fgfgfgfgfg\n\r\tchar* pointer = malloc(sizeof(char) * 10);\n\r\t//dfgdfgdfgdfg\n\r\t//fgfgfgfgfg\n\r\t/*\n\r\t#ifdef Eight\n\r\tint EightIsGood;\n\r\t#endif\n\r\tchar* runner = pointer;\n\r\t*retval = pointer;\n\r\t/*                  sdfsdfsdfsd*/\n\r\tchar** pointer2 = calloc(10, sizeof(char));\n\r\t/*\n\r\tif (!pointer2)\n\r\t{\n\r\t\tprinf(\"checked\");\n\r\t}\n\r\tfor (int i = 0; i < max; i++)\n\r\t{\n\r\t\t*runner = 'a';\n\r\t\trunner++;\n\r\t}\n\r\t*runner = '\\0';\n\r\tchar* pointer5 = alloc(sizeof(char) * 10);\n\r\tchar* pointer4 = pointer5;\n\r\tchar* pointer6 = pointer4;\n\r\t/*\n\r\tputs(pointer);\n\r\treturn 0;\n\r\t\n\r}\n\r\n\r","parameters":[{"parameterName":"podd","parameterType":"int*"},{"parameterName":"odpdf","parameterType":"int**"},{"parameterName":"a","parameterType":"char"},{"parameterName":"retval","parameterType":"char*"}],"returnType":"int","documentation":"","codeLength":62,"variables":[{"parameterName":"num","parameterType":"int"},{"parameterName":"temp","parameterType":"structexample1"},{"parameterName":"d","parameterType":"structexample3"},{"parameterName":"s","parameterType":"int***"},{"parameterName":"max","parameterType":"int"},{"parameterName":"yosi","parameterType":"char*"},{"parameterName":"dosi","parameterType":"char"},{"parameterName":"resultttt","parameterType":"int"},{"parameterName":"pointer","parameterType":"char*"},{"parameterName":"EightIsGood","parameterType":"int"},{"parameterName":"runner","parameterType":"char*"},{"parameterName":"pointer2","parameterType":"char**"},{"parameterName":"pointer5","parameterType":"char*"},{"parameterName":"pointer4","parameterType":"char*"},{"parameterName":"pointer6","parameterType":"char*"}],"fName":"main","exitPointsAmount":1,"allExitPoints":["return 0;"],"pattern":"([^\\s]+)?int[\\s\\*]+main[\\s(]+int\\*[\\s\\*]+podd[,\\s]+int\\*\\*[\\s\\*]+odpdf[,\\s]+char[\\s\\*]+a[,\\s]+char\\*[\\s\\*]+retval[)\\s]+$","memoryAllocation":true,"memoryRelease":false,"calledFromFunc":[]}}
"logs logs logs logs \n logs logs logs \n another logs and another logs \n yay !"
NoEvarTurnedOn
..\..\..\ToolsExe\Client2\bin\Debug\Client2.exe
functions
{"void spoi(char* a, char b)":{"content":"{ \n\tif (num == null)\n\r\t{\n\r\t\tprintf(\"ssss\");\n\r\t}\n\r\t*num = 0;\n\r}\n\r","parameters":[{"parameterName":"a","parameterType":"char*"},{"parameterName":"b","parameterType":"char"}],"returnType":"void","documentation":"/*\n\r* sends a message to a client\n\r* @params:\n\r* podd - the initsdfsdfsdfsdf\n\r* odpdf - kkdlldkdkfkdf\n\r  whichis doing siht\n\r* a - size -the size of the buffer\n\r* retval - sdfsdf\n\r* @returns:\n\r* if the messege  djfdjfddn dfkdf mdfdk dfm\n\r*/\n\r","codeLength":5,"variables":[{"parameterName":"a","parameterType":"int"},{"parameterName":"b","parameterType":"int"},{"parameterName":"a","parameterType":"int"}],"fName":"spoi","exitPointsAmount":0,"allExitPoints":[],"pattern":"([^\\s]+)?void[\\s\\*]+spoi[\\s(]+char\\*[\\s\\*]+a[,\\s]+char[\\s\\*]+b[)\\s]+$","memoryAllocation":false,"memoryRelease":false,"calledFromFunc":["static int* main(int* podd, int** odpdf, char a, char* retval)"]},"static int* main(int* podd, int** odpdf, char a, char* retval)":{"content":"{ \n\tint num;\n\r\tstruct example1 temp;\n\r\tstruct example3 {\n\r\t\tint a;\n\r\t\tint b;\n\r\t};\n\r\tstruct example3 d;\n\r\tint*** s;\n\r\tint max = 5;\n\r\tif (max)\n\r\t{\n\r\t\tint max2 = max;\n\r\t}\n\r\tchar* yosi = \"a\";\n\r\tchar dosi = \"s\";\n\r\t#ifdef evar1\n\r\tspoi(yosi, dosi);\n\r\t//dfgdfgdfgdfg\n\r\t//fgfgfgfgfg\n\r\tchar* pointer = malloc(sizeof(char) * 10);\n\r\t//dfgdfgdfgdfg\n\r\t//fgfgfgfgfg\n\r\t/*\n\r\t#ifdef Eight\n\r\tint EightIsGood;\n\r\t#endif\n\r\tchar* runner = pointer;\n\r\t*retval = pointer;\n\r\t/*                  sdfsdfsdfsd*/\n\r\tchar** pointer2 = calloc(10, sizeof(char));\n\r\t/*\n\r\tif (!pointer2)\n\r\t{\n\r\t\tprinf(\"checked\");\n\r\t}\n\r\tfor (int i = 0; i < max; i++)\n\r\t{\n\r\t\t*runner = 'a';\n\r\t\trunner++;\n\r\t}\n\r\t*runner = '\\0';\n\r\tchar* pointer5 = alloc(sizeof(char) * 10);\n\r\tchar* pointer4 = pointer5;\n\r\tchar* pointer6 = pointer4;\n\r\t/*\n\r\tputs(pointer);\n\r\treturn 0;\n\r\t\n\r}\n\r\n\r","parameters":[{"parameterName":"podd","parameterType":"int*"},{"parameterName":"odpdf","parameterType":"int**"},{"parameterName":"a","parameterType":"char"},{"parameterName":"retval","parameterType":"char*"}],"returnType":"int","documentation":"","codeLength":62,"variables":[{"parameterName":"num","parameterType":"int"},{"parameterName":"temp","parameterType":"structexample1"},{"parameterName":"d","parameterType":"structexample3"},{"parameterName":"s","parameterType":"int***"},{"parameterName":"max","parameterType":"int"},{"parameterName":"yosi","parameterType":"char*"},{"parameterName":"dosi","parameterType":"char"},{"parameterName":"pointer","parameterType":"char*"},{"parameterName":"EightIsGood","parameterType":"int"},{"parameterName":"runner","parameterType":"char*"},{"parameterName":"pointer2","parameterType":"char**"},{"parameterName":"pointer5","parameterType":"char*"},{"parameterName":"pointer4","parameterType":"char*"},{"parameterName":"pointer6","parameterType":"char*"}],"fName":"main","exitPointsAmount":1,"allExitPoints":["return 0;"],"pattern":"([^\\s]+)?int[\\s\\*]+main[\\s(]+int\\*[\\s\\*]+podd[,\\s]+int\\*\\*[\\s\\*]+odpdf[,\\s]+char[\\s\\*]+a[,\\s]+char\\*[\\s\\*]+retval[)\\s]+$","memoryAllocation":true,"memoryRelease":false,"calledFromFunc":[]}}
"logs logs logs logs \n logs logs logs \n another logs and another logs \n yay !"
Finished succesfully code is ready at the destination path.
